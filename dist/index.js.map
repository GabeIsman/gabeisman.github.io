{
  "version": 3,
  "sources": ["../src/canvas.ts", "../src/grid.ts", "../src/patterns.ts", "../src/game.ts", "../src/index.ts"],
  "sourcesContent": ["import \"./types.ts\";\n\nexport default class Canvas {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  gridSize: number;\n\n  constructor(canvas: HTMLCanvasElement, fullScreen = true) {\n    const context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      throw new TypeError(\"2d context not supported.\");\n    }\n\n    this.context = context;\n    this.canvas = canvas;\n\n    if (fullScreen) {\n      window.addEventListener(\"resize\", () => this.resizeCanvas());\n      this.resizeCanvas();\n    }\n  }\n\n  draw(drawable: Drawable, point: Point, color: string) {\n    const currentStyle = this.context.fillStyle;\n    this.context.fillStyle = color;\n    drawable.draw(this.context, point);\n    this.context.fillStyle = currentStyle;\n  }\n\n  clear() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private resizeCanvas() {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n  }\n}\n", "import \"./types\";\n\nexport default class Grid implements Drawable {\n  dimensions: Point;\n  grid: Array<Array<number>>;\n  cellSize: number;\n\n  constructor(dimensions: Point, cellSize: number) {\n    this.dimensions = dimensions;\n    this.cellSize = cellSize;\n    this.resetGrid();\n  }\n\n  draw(context: CanvasRenderingContext2D, point: Point) {\n    context.beginPath();\n    for (let x = 0; x < this.dimensions.x; x++) {\n      for (let y = 0; y < this.dimensions.y; y++) {\n        if (this.grid[y][x] > 0) {\n          context.fillRect(\n            point.x + x * this.cellSize,\n            point.y + y * this.cellSize,\n            this.cellSize,\n            this.cellSize\n          );\n        }\n      }\n    }\n    context.stroke();\n  }\n\n  mapPoints(fn: (value: number, point: Point) => number) {\n    const nextGrid = structuredClone(this.grid);\n    for (let x = 0; x < this.dimensions.x; x++) {\n      for (let y = 0; y < this.dimensions.y; y++) {\n        nextGrid[y][x] = fn(this.grid[y][x], { x, y });\n      }\n    }\n    this.grid = nextGrid;\n  }\n\n  sumOfNeighboringValues(point: Point): number {\n    return this.neighboringValues(point).reduce((sum, value) => sum + value, 0);\n  }\n\n  placePattern(pattern: Array<Array<number>>, point: Point) {\n    for (let y = 0; y < pattern.length; y++) {\n      for (let x = 0; x < pattern[y].length; x++) {\n        this.setValue({ x: point.x + x, y: point.y + y }, pattern[y][x]);\n      }\n    }\n  }\n\n  randomize(threshold: number) {\n    this.mapPoints(() => (Math.random() > threshold ? 1 : 0));\n  }\n\n  resize(dimensions: Point) {\n    if (dimensions.x <= 0 || dimensions.y <= 0) {\n      throw new Error(\"Dimensions must be greater than 0.\");\n    }\n    this.dimensions = dimensions;\n    const oldGrid = structuredClone(this.grid);\n    this.resetGrid();\n    this.placePattern(oldGrid, { x: 0, y: 0 });\n  }\n\n  getValue(point: Point) {\n    const wrappedPoint = this.wrap(point);\n    return this.grid[wrappedPoint.y][wrappedPoint.x];\n  }\n\n  setValue(point: Point, value: number) {\n    const wrappedPoint = this.wrap(point);\n    this.grid[wrappedPoint.y][wrappedPoint.x] = value;\n  }\n\n  private wrap(point: Point): Point {\n    return {\n      x: (point.x + this.dimensions.x) % this.dimensions.x,\n      y: (point.y + this.dimensions.y) % this.dimensions.y,\n    };\n  }\n\n  private neighboringValues(point: Point): Array<number> {\n    return [\n      this.getValue({ x: point.x - 1, y: point.y - 1 }) ?? 0,\n      this.getValue({ x: point.x, y: point.y - 1 }) ?? 0,\n      this.getValue({ x: point.x + 1, y: point.y - 1 }) ?? 0,\n      this.getValue({ x: point.x - 1, y: point.y }) ?? 0,\n      this.getValue({ x: point.x + 1, y: point.y }) ?? 0,\n      this.getValue({ x: point.x - 1, y: point.y + 1 }) ?? 0,\n      this.getValue({ x: point.x, y: point.y + 1 }) ?? 0,\n      this.getValue({ x: point.x + 1, y: point.y + 1 }) ?? 0,\n    ];\n  }\n\n  private resetGrid() {\n    this.grid = Array.from({ length: this.dimensions.y }, () =>\n      Array.from({ length: this.dimensions.x }, () => 0)\n    );\n  }\n}\n", "export const BLINKER = [\n  [0, 1, 0],\n  [0, 1, 0],\n  [0, 1, 0],\n];\n\nexport const GLIDER = [\n  [0, 0, 1],\n  [1, 0, 1],\n  [0, 1, 1],\n];\n\nexport const ACORN = [\n  [0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0],\n  [1, 1, 0, 0, 1, 1, 1],\n];\n\nexport const BLOCK_ENGINE = [\n  [1, 1, 1, 0, 1],\n  [1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1],\n  [0, 1, 1, 0, 1],\n  [1, 0, 1, 0, 1],\n];\n\nexport const GLIDER_GUN = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0, 0],\n  [1, 0, 0, 0, 0, 0, 1, 0, 0],\n  [1, 0, 0, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 1, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0, 0, 1, 1],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 0, 0, 0, 1, 1, 0, 0],\n];\n", "import Canvas from \"./canvas.ts\";\nimport Grid from \"./grid.ts\";\nimport {\n  ACORN,\n  BLOCK_ENGINE,\n  GLIDER_GUN,\n  GLIDER,\n  BLINKER,\n} from \"./patterns.ts\";\n\nexport default class Game {\n  canvas: Canvas;\n  grid: Grid;\n  tickSpeed: number; // ms\n  lastTick: number; // ms\n  cellSize: number; // px\n\n  constructor(canvas: Canvas, tickSpeed: number, cellSize = 3) {\n    if (cellSize <= 0) {\n      throw new Error(\"Cell size must be greater than 0.\");\n    }\n\n    if (tickSpeed <= 0) {\n      throw new Error(\"Tick speed must be greater than 0.\");\n    }\n\n    this.cellSize = cellSize;\n    this.canvas = canvas;\n    this.lastTick = 0;\n    this.grid = new Grid(this.gridDimensions(), this.cellSize);\n    this.tickSpeed = tickSpeed;\n    window.addEventListener(\"resize\", () =>\n      this.grid.resize(this.gridDimensions())\n    );\n  }\n\n  start() {\n    this.grid.placePattern(BLOCK_ENGINE, { x: 300, y: 200 });\n    this.grid.placePattern(GLIDER_GUN, { x: 500, y: 100 });\n    this.grid.placePattern(ACORN, { x: 100, y: 200 });\n    this.tick();\n  }\n\n  private tick() {\n    requestAnimationFrame((time) => {\n      if (time - this.lastTick >= this.tickSpeed) {\n        this.updateGameState();\n        this.render();\n        this.lastTick = time;\n      }\n      this.tick();\n    });\n  }\n\n  private updateGameState() {\n    this.grid.mapPoints((value: number, point: Point): number => {\n      const sum = this.grid.sumOfNeighboringValues(point);\n      // Living cell survives with 2 neighbors\n      if (value === 1 && sum === 2) {\n        return 1;\n        // Any cell lives with 3\n      } else if (sum === 3) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n\n  private render() {\n    this.canvas.clear();\n    this.canvas.draw(this.grid, { x: 0, y: 0 }, \"dodgerblue\");\n  }\n\n  private gridDimensions(): Point {\n    return {\n      x: Math.ceil(window.innerWidth / this.cellSize),\n      y: Math.ceil(window.innerHeight / this.cellSize),\n    };\n  }\n}\n", "import Canvas from \"./canvas.ts\";\nimport Game from \"./game.ts\";\n\nconst canvasElement: HTMLCanvasElement | null =\n  document.querySelector(\"canvas\");\n\nif (!canvasElement) {\n  throw new TypeError(\"No canvas found.\");\n}\n\nconst canvas = new Canvas(canvasElement);\nconst game = new Game(canvas, 60);\ngame.start();\n"],
  "mappings": "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",
  "names": ["Canvas", "canvas", "fullScreen", "__publicField", "context", "drawable", "point", "color", "currentStyle", "Grid", "dimensions", "cellSize", "__publicField", "context", "point", "x", "y", "fn", "nextGrid", "sum", "value", "pattern", "threshold", "oldGrid", "wrappedPoint", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "ACORN", "BLOCK_ENGINE", "GLIDER_GUN", "Game", "canvas", "tickSpeed", "cellSize", "__publicField", "Grid", "BLOCK_ENGINE", "GLIDER_GUN", "ACORN", "time", "value", "point", "sum", "canvasElement", "canvas", "Canvas", "game", "Game"]
}
