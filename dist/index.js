(()=>{var v=Object.defineProperty;var f=(n,e,t)=>e in n?v(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var s=(n,e,t)=>f(n,typeof e!="symbol"?e+"":e,t);var a=class{constructor(e,t=!0){s(this,"canvas");s(this,"context");s(this,"gridSize");let i=e.getContext("2d");if(!i)throw new TypeError("2d context not supported.");this.context=i,this.canvas=e,t&&(window.addEventListener("resize",()=>this.resizeCanvas()),this.resizeCanvas())}draw(e,t,i){let r=this.context.fillStyle;this.context.fillStyle=i,e.draw(this.context,t),this.context.fillStyle=r}clear(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}resizeCanvas(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}};var o=class{constructor(e,t){s(this,"dimensions");s(this,"grid");s(this,"cellSize");this.dimensions=e,this.cellSize=t,this.resetGrid()}draw(e,t){e.beginPath();for(let i=0;i<this.dimensions.x;i++)for(let r=0;r<this.dimensions.y;r++)this.grid[r][i]>0&&e.fillRect(t.x+i*this.cellSize,t.y+r*this.cellSize,this.cellSize,this.cellSize);e.stroke()}mapPoints(e){let t=structuredClone(this.grid);for(let i=0;i<this.dimensions.x;i++)for(let r=0;r<this.dimensions.y;r++)t[r][i]=e(this.grid[r][i],{x:i,y:r});this.grid=t}sumOfNeighboringValues(e){return this.neighboringValues(e).reduce((t,i)=>t+i,0)}placePattern(e,t){for(let i=0;i<e.length;i++)for(let r=0;r<e[i].length;r++)this.setValue({x:t.x+r,y:t.y+i},e[i][r])}randomize(e){this.mapPoints(()=>Math.random()>e?1:0)}resize(e){if(e.x<=0||e.y<=0)throw new Error("Dimensions must be greater than 0.");this.dimensions=e;let t=structuredClone(this.grid);this.resetGrid(),this.placePattern(t,{x:0,y:0})}getValue(e){let t=this.wrap(e);return this.grid[t.y][t.x]}setValue(e,t){let i=this.wrap(e);this.grid[i.y][i.x]=t}wrap(e){return{x:(e.x+this.dimensions.x)%this.dimensions.x,y:(e.y+this.dimensions.y)%this.dimensions.y}}neighboringValues(e){var t,i,r,l,d,c,u,m;return[(t=this.getValue({x:e.x-1,y:e.y-1}))!=null?t:0,(i=this.getValue({x:e.x,y:e.y-1}))!=null?i:0,(r=this.getValue({x:e.x+1,y:e.y-1}))!=null?r:0,(l=this.getValue({x:e.x-1,y:e.y}))!=null?l:0,(d=this.getValue({x:e.x+1,y:e.y}))!=null?d:0,(c=this.getValue({x:e.x-1,y:e.y+1}))!=null?c:0,(u=this.getValue({x:e.x,y:e.y+1}))!=null?u:0,(m=this.getValue({x:e.x+1,y:e.y+1}))!=null?m:0]}resetGrid(){this.grid=Array.from({length:this.dimensions.y},()=>Array.from({length:this.dimensions.x},()=>0))}};var g=[[0,1,0,0,0,0,0],[0,0,0,1,0,0,0],[1,1,0,0,1,1,1]],x=[[1,1,1,0,1],[1,0,0,0,0],[0,0,0,1,1],[0,1,1,0,1],[1,0,1,0,1]],y=[[0,0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,0],[0,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,1,0,0,0,1,0,0,0],[1,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,1,0,0],[0,0,0,0,0,1,1,0,0]];var h=class{constructor(e,t,i=3){s(this,"canvas");s(this,"grid");s(this,"tickSpeed");s(this,"lastTick");s(this,"cellSize");if(i<=0)throw new Error("Cell size must be greater than 0.");if(t<=0)throw new Error("Tick speed must be greater than 0.");this.cellSize=i,this.canvas=e,this.lastTick=0,this.grid=new o(this.gridDimensions(),this.cellSize),this.tickSpeed=t,window.addEventListener("resize",()=>this.grid.resize(this.gridDimensions()))}start(){this.grid.placePattern(x,{x:300,y:200}),this.grid.placePattern(y,{x:500,y:100}),this.grid.placePattern(g,{x:100,y:200}),this.tick()}tick(){requestAnimationFrame(e=>{e-this.lastTick>=this.tickSpeed&&(this.updateGameState(),this.render(),this.lastTick=e),this.tick()})}updateGameState(){this.grid.mapPoints((e,t)=>{let i=this.grid.sumOfNeighboringValues(t);return e===1&&i===2||i===3?1:0})}render(){this.canvas.clear(),this.canvas.draw(this.grid,{x:0,y:0},"dodgerblue")}gridDimensions(){return{x:Math.ceil(window.innerWidth/this.cellSize),y:Math.ceil(window.innerHeight/this.cellSize)}}};var w=document.querySelector("canvas");if(!w)throw new TypeError("No canvas found.");var p=new a(w),b=new h(p,60);b.start();})();
//# sourceMappingURL=index.js.map
